name: Deploy Test My-food backend
env:
  MYFOOD_ENVIRONMENT: TEST_SERVER
  MYFOOD_DEBUG: False
  # MYFOOD_SERVER_STATIC_DIR: /home/ubuntu/django-static
  MYFOOD_AWS_ACCESS_KEY: ${{ vars.MYFOOD_AWS_ACCESS_KEY }}
  MYFOOD_AWS_SECRET_ACCESS_KEY: ${{ vars.MYFOOD_AWS_SECRET_ACCESS_KEY }}


run-name: ${{ github.event.head_commit.message }}
on:
  push
jobs:
  me-deployment:
    runs-on: test-my-food-runner
    environment: me
    name: Deploy to test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            nginx:
              - 'deploy/nginx/**'
            migrations:
              - 'my_food/migrations/**'
            bashrc:
              - 'my_food/deploy/.bashrc'
      - name: Update nginx config
        # if: steps.changes.outputs.nginx == 'true'
        run: >
          sudo cp deploy/nginx/nginx_test_my-food.conf /etc/nginx/sites-enabled/nginx_myfood.conf &&
          sudo cp deploy/nginx/nginx_base.conf /etc/nginx/nginx.conf &&
          sudo service nginx reload

      - name: Store env vars in file
        run: env | grep MYFOOD > .env

      - name: Update .bashrc
        # if: steps.changes.outputs.bashrc == 'true'
        run: sudo cp deploy/.bashrc_test_hostinger /root/.bashrc

      - name: Build both docker images
        # if: steps.changes.outputs.migrations == 'true'
        run: sudo docker compose build server cmd_migrations

      - name: Build only server image
        # if: steps.changes.outputs.migrations == 'false'
        run: sudo docker compose build server

      - name: Apply migrations
        # if: steps.changes.outputs.migrations == 'true'
        run: sudo docker compose run cmd_migrations

      - name: Restart service
        run: sudo docker compose up --detach server

      - name: Copy static files
        run: >
          sudo docker cp my-food-server-1:/app/django-static/ /home/ubuntu/django-static/
