services:
  django:
    build:
      context: ./services/django
    command: >
      gunicorn myfood.wsgi:application
      --name myfood
      --bind 0.0.0.0:8000
      --log-level info
    ports:
      - "8000:8000"
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - /var/log/server_logs/:/app/.logs/
      - static_data:/app/django-static/
    restart: always

  fastapi:
    build:
      context: ./services/fastapi
    command: >
      uvicorn 
      app:app 
      --host 0.0.0.0 
      --port 8001
    env_file:
      - .env
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always

  django_tests:
    build:
      context: ./services/django
    command:
      - pytest
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"

  caddy:
    image: caddy:2
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data   
      - static_data:/srv/static/ 

  cmd_migrations:
    build:
      context: ./services/django
    command: >
      python 
      manage.py 
      migrate
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy 
    extra_hosts:
      - "host.docker.internal:host-gateway"

  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${MYFOOD_DATABASE_NAME}
      POSTGRES_USER: ${MYFOOD_DATABASE_USER}
      POSTGRES_PASSWORD: ${MYFOOD_DATABASE_PASS}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MYFOOD_DATABASE_USER} -d ${MYFOOD_DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  cmd_food_to_db:
    build:
      context: ./services/django
    command: >
      python 
      manage.py 
      food_to_db
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"

  cmd_fill_db:
    build:
      context: ./services/django
    command: python manage.py fill_food_products --count 100000
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  caddy_data:
  static_data:
  postgres_data: